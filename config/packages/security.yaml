security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            pattern: ^/api/login
            stateless: true
            provider: app_user_provider
            json_login:
                check_path: /api/login_check
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            jwt: ~
            logout:
                path: api_login_logout

        api_secure:
            pattern: ^/api/secure
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        api_public:
            pattern: ^/api/user/(patient|pharmacist|driver)/
            stateless: true
            

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/user/patient/, roles: PUBLIC_ACCESS }
        - { path: ^/api/user/pharmacist/, roles: PUBLIC_ACCESS }
        - { path: ^/api/user/driver, roles: PUBLIC_ACCESS }
        - { path: ^/api/secure/user/patient/\d+$, roles: ROLE_PATIENT, methods: [PUT] }
        - { path: ^/api/secure/patient/new/\d+$/vital, roles: ROLE_PATIENT }
        - { path: ^/api/secure/patient/new/\d+$/mutuelle, roles: ROLE_PATIENT }
        - { path: ^/api/secure/user/pharmacist/\d+$, roles: ROLE_PHARMACIST, methods: [PUT]}
        - { path: ^/api/secure/user/driver/\d+$, roles: ROLE_DRIVER, methods: [PUT]}
        - { path: ^/api/secure/order/new/\d+$, roles: IS_AUTHENTICATED_FULLY}
        - { path: ^/api/secure/order/new/\d+$/image, roles: IS_AUTHENTICATED_FULLY}
        - { path: ^/api/secure/order/\d+$, roles: IS_AUTHENTICATED_FULLY}
        - { path: ^/api/address/dispensary/\d+$, roles: ROLE_PHARMACIST}
        - { path: ^/api/secure/address/dispensary/\d+$, roles: ROLE_PHARMACIST}
        - { path: ^/api/secure/dispensary/\d+$, roles: ROLE_PHARMACIST}
        - { path: ^/api/secure/user/address/\d+$, roles: IS_AUTHENTICATED_FULLY}
        - { path: ^/api/secure/profil, roles: IS_AUTHENTICATED_FULLY}
        - { path: ^/api/secure/user/\d+$, roles: IS_AUTHENTICATED_FULLY}
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

   

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
